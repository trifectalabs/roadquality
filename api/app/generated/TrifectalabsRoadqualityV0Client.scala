/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.3
 * apidoc:0.11.76 http://www.apidoc.me/trifectalabs/roadquality/0.0.3/play_2_5_client
 */
package com.trifectalabs.roadquality.v0.models {

  /**
   * A routable path on a map - not necessarily a segment
   */
  case class MapRoute(
    polyline: String,
    distance: Double
  )

  /**
   * A longitudinal or latitudinal coordatine
   */
  case class Point(
    lat: Double,
    lng: Double
  )

  /**
   * A segment of road which will be rated and tagged
   */
  case class Segment(
    id: _root_.java.util.UUID,
    name: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    start: com.trifectalabs.roadquality.v0.models.Point,
    end: com.trifectalabs.roadquality.v0.models.Point,
    polyline: String,
    overallRating: Double,
    surfaceRating: Double,
    trafficRating: Double,
    surface: com.trifectalabs.roadquality.v0.models.Surface,
    pathType: com.trifectalabs.roadquality.v0.models.PathType
  )

  /**
   * Form the client uses to create a segment
   */
  case class SegmentForm(
    name: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    points: Seq[com.trifectalabs.roadquality.v0.models.Point],
    surfaceRating: Double = 0.0,
    trafficRating: Double = 0.0,
    surface: com.trifectalabs.roadquality.v0.models.Surface = com.trifectalabs.roadquality.v0.models.Surface.Asphalt,
    pathType: com.trifectalabs.roadquality.v0.models.PathType = com.trifectalabs.roadquality.v0.models.PathType.Shared
  )

  /**
   * A user of the service
   */
  case class User(
    id: _root_.java.util.UUID,
    firstName: String,
    lastName: String,
    email: String,
    birthdate: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    sex: _root_.scala.Option[String] = None,
    role: com.trifectalabs.roadquality.v0.models.UserRole = com.trifectalabs.roadquality.v0.models.UserRole.User,
    stravaToken: String,
    createdAt: _root_.org.joda.time.DateTime,
    updatedAt: _root_.org.joda.time.DateTime,
    deletedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  case class VersionInfo(
    name: String,
    version: String,
    scalaVersion: String,
    sbtVersion: String
  )

  /**
   * The level of dedication of the segment to cycling
   */
  sealed trait PathType

  object PathType {

    /**
     * A shared road for cars and bikes (road shoulder)
     */
    case object Shared extends PathType { override def toString = "shared" }
    /**
     * A dedicated bike lane on the road
     */
    case object DedicatedLane extends PathType { override def toString = "dedicatedLane" }
    /**
     * A completely isolated bike lane (a natural barrier from road traffic)
     */
    case object BikePath extends PathType { override def toString = "bikePath" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends PathType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Shared, DedicatedLane, BikePath)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): PathType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[PathType] = byName.get(value.toLowerCase)

  }

  /**
   * The surface type of a segment (road type)
   */
  sealed trait Surface

  object Surface {

    /**
     * Road consisting of small rocks
     */
    case object Gravel extends Surface { override def toString = "gravel" }
    /**
     * Road consisting of paved asphalt
     */
    case object Asphalt extends Surface { override def toString = "asphalt" }
    /**
     * Road consisting of cleared dirt
     */
    case object Dirt extends Surface { override def toString = "dirt" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Surface

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Gravel, Asphalt, Dirt)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Surface = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Surface] = byName.get(value.toLowerCase)

  }

  /**
   * The type of user (user or admin)
   */
  sealed trait UserRole

  object UserRole {

    /**
     * A standard consumer of the service
     */
    case object User extends UserRole { override def toString = "user" }
    /**
     * An administrator of the application
     */
    case object Admin extends UserRole { override def toString = "admin" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends UserRole

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(User, Admin)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): UserRole = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[UserRole] = byName.get(value.toLowerCase)

  }

}

package com.trifectalabs.roadquality.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.trifectalabs.roadquality.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsRoadqualityPathType = new play.api.libs.json.Reads[com.trifectalabs.roadquality.v0.models.PathType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.roadquality.v0.models.PathType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.PathType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.PathType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesRoadqualityPathType(obj: com.trifectalabs.roadquality.v0.models.PathType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPathType(obj: com.trifectalabs.roadquality.v0.models.PathType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesRoadqualityPathType: play.api.libs.json.Writes[PathType] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.PathType] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.PathType) = {
          jsonWritesRoadqualityPathType(obj)
        }
      }
    }

    implicit val jsonReadsRoadqualitySurface = new play.api.libs.json.Reads[com.trifectalabs.roadquality.v0.models.Surface] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.roadquality.v0.models.Surface] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.Surface(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.Surface(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesRoadqualitySurface(obj: com.trifectalabs.roadquality.v0.models.Surface) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSurface(obj: com.trifectalabs.roadquality.v0.models.Surface) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesRoadqualitySurface: play.api.libs.json.Writes[Surface] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.Surface] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.Surface) = {
          jsonWritesRoadqualitySurface(obj)
        }
      }
    }

    implicit val jsonReadsRoadqualityUserRole = new play.api.libs.json.Reads[com.trifectalabs.roadquality.v0.models.UserRole] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.trifectalabs.roadquality.v0.models.UserRole] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.UserRole(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.trifectalabs.roadquality.v0.models.UserRole(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesRoadqualityUserRole(obj: com.trifectalabs.roadquality.v0.models.UserRole) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectUserRole(obj: com.trifectalabs.roadquality.v0.models.UserRole) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesRoadqualityUserRole: play.api.libs.json.Writes[UserRole] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.UserRole] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.UserRole) = {
          jsonWritesRoadqualityUserRole(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualityMapRoute: play.api.libs.json.Reads[MapRoute] = {
      (
        (__ \ "polyline").read[String] and
        (__ \ "distance").read[Double]
      )(MapRoute.apply _)
    }

    def jsObjectMapRoute(obj: com.trifectalabs.roadquality.v0.models.MapRoute) = {
      play.api.libs.json.Json.obj(
        "polyline" -> play.api.libs.json.JsString(obj.polyline),
        "distance" -> play.api.libs.json.JsNumber(obj.distance)
      )
    }

    implicit def jsonWritesRoadqualityMapRoute: play.api.libs.json.Writes[MapRoute] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.MapRoute] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.MapRoute) = {
          jsObjectMapRoute(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualityPoint: play.api.libs.json.Reads[Point] = {
      (
        (__ \ "lat").read[Double] and
        (__ \ "lng").read[Double]
      )(Point.apply _)
    }

    def jsObjectPoint(obj: com.trifectalabs.roadquality.v0.models.Point) = {
      play.api.libs.json.Json.obj(
        "lat" -> play.api.libs.json.JsNumber(obj.lat),
        "lng" -> play.api.libs.json.JsNumber(obj.lng)
      )
    }

    implicit def jsonWritesRoadqualityPoint: play.api.libs.json.Writes[Point] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.Point] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.Point) = {
          jsObjectPoint(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualitySegment: play.api.libs.json.Reads[Segment] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "name").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "start").read[com.trifectalabs.roadquality.v0.models.Point] and
        (__ \ "end").read[com.trifectalabs.roadquality.v0.models.Point] and
        (__ \ "polyline").read[String] and
        (__ \ "overallRating").read[Double] and
        (__ \ "surfaceRating").read[Double] and
        (__ \ "trafficRating").read[Double] and
        (__ \ "surface").read[com.trifectalabs.roadquality.v0.models.Surface] and
        (__ \ "pathType").read[com.trifectalabs.roadquality.v0.models.PathType]
      )(Segment.apply _)
    }

    def jsObjectSegment(obj: com.trifectalabs.roadquality.v0.models.Segment) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "start" -> jsObjectPoint(obj.start),
        "end" -> jsObjectPoint(obj.end),
        "polyline" -> play.api.libs.json.JsString(obj.polyline),
        "overallRating" -> play.api.libs.json.JsNumber(obj.overallRating),
        "surfaceRating" -> play.api.libs.json.JsNumber(obj.surfaceRating),
        "trafficRating" -> play.api.libs.json.JsNumber(obj.trafficRating),
        "surface" -> play.api.libs.json.JsString(obj.surface.toString),
        "pathType" -> play.api.libs.json.JsString(obj.pathType.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesRoadqualitySegment: play.api.libs.json.Writes[Segment] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.Segment] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.Segment) = {
          jsObjectSegment(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualitySegmentForm: play.api.libs.json.Reads[SegmentForm] = {
      (
        (__ \ "name").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "points").read[Seq[com.trifectalabs.roadquality.v0.models.Point]] and
        (__ \ "surfaceRating").read[Double] and
        (__ \ "trafficRating").read[Double] and
        (__ \ "surface").read[com.trifectalabs.roadquality.v0.models.Surface] and
        (__ \ "pathType").read[com.trifectalabs.roadquality.v0.models.PathType]
      )(SegmentForm.apply _)
    }

    def jsObjectSegmentForm(obj: com.trifectalabs.roadquality.v0.models.SegmentForm) = {
      play.api.libs.json.Json.obj(
        "points" -> play.api.libs.json.Json.toJson(obj.points),
        "surfaceRating" -> play.api.libs.json.JsNumber(obj.surfaceRating),
        "trafficRating" -> play.api.libs.json.JsNumber(obj.trafficRating),
        "surface" -> play.api.libs.json.JsString(obj.surface.toString),
        "pathType" -> play.api.libs.json.JsString(obj.pathType.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesRoadqualitySegmentForm: play.api.libs.json.Writes[SegmentForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.SegmentForm] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.SegmentForm) = {
          jsObjectSegmentForm(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualityUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "firstName").read[String] and
        (__ \ "lastName").read[String] and
        (__ \ "email").read[String] and
        (__ \ "birthdate").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "sex").readNullable[String] and
        (__ \ "role").read[com.trifectalabs.roadquality.v0.models.UserRole] and
        (__ \ "stravaToken").read[String] and
        (__ \ "createdAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "updatedAt").read[_root_.org.joda.time.DateTime] and
        (__ \ "deletedAt").readNullable[_root_.org.joda.time.DateTime]
      )(User.apply _)
    }

    def jsObjectUser(obj: com.trifectalabs.roadquality.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "firstName" -> play.api.libs.json.JsString(obj.firstName),
        "lastName" -> play.api.libs.json.JsString(obj.lastName),
        "email" -> play.api.libs.json.JsString(obj.email),
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "stravaToken" -> play.api.libs.json.JsString(obj.stravaToken),
        "createdAt" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt)),
        "updatedAt" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.updatedAt))
      ) ++ (obj.birthdate match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("birthdate" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.sex match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("sex" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deletedAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deletedAt" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      })
    }

    implicit def jsonWritesRoadqualityUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.User] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsRoadqualityVersionInfo: play.api.libs.json.Reads[VersionInfo] = {
      (
        (__ \ "name").read[String] and
        (__ \ "version").read[String] and
        (__ \ "scalaVersion").read[String] and
        (__ \ "sbtVersion").read[String]
      )(VersionInfo.apply _)
    }

    def jsObjectVersionInfo(obj: com.trifectalabs.roadquality.v0.models.VersionInfo) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version),
        "scalaVersion" -> play.api.libs.json.JsString(obj.scalaVersion),
        "sbtVersion" -> play.api.libs.json.JsString(obj.sbtVersion)
      )
    }

    implicit def jsonWritesRoadqualityVersionInfo: play.api.libs.json.Writes[VersionInfo] = {
      new play.api.libs.json.Writes[com.trifectalabs.roadquality.v0.models.VersionInfo] {
        def writes(obj: com.trifectalabs.roadquality.v0.models.VersionInfo) = {
          jsObjectVersionInfo(obj)
        }
      }
    }
  }
}

package com.trifectalabs.roadquality.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.trifectalabs.roadquality.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: PathType
    private[this] val enumPathTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.roadquality.v0.models.PathType.all.mkString(", ")}"

    implicit val pathBindableEnumPathType = new PathBindable.Parsing[com.trifectalabs.roadquality.v0.models.PathType] (
      PathType.fromString(_).get, _.toString, enumPathTypeNotFound
    )

    implicit val queryStringBindableEnumPathType = new QueryStringBindable.Parsing[com.trifectalabs.roadquality.v0.models.PathType](
      PathType.fromString(_).get, _.toString, enumPathTypeNotFound
    )

    // Enum: Surface
    private[this] val enumSurfaceNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.roadquality.v0.models.Surface.all.mkString(", ")}"

    implicit val pathBindableEnumSurface = new PathBindable.Parsing[com.trifectalabs.roadquality.v0.models.Surface] (
      Surface.fromString(_).get, _.toString, enumSurfaceNotFound
    )

    implicit val queryStringBindableEnumSurface = new QueryStringBindable.Parsing[com.trifectalabs.roadquality.v0.models.Surface](
      Surface.fromString(_).get, _.toString, enumSurfaceNotFound
    )

    // Enum: UserRole
    private[this] val enumUserRoleNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.trifectalabs.roadquality.v0.models.UserRole.all.mkString(", ")}"

    implicit val pathBindableEnumUserRole = new PathBindable.Parsing[com.trifectalabs.roadquality.v0.models.UserRole] (
      UserRole.fromString(_).get, _.toString, enumUserRoleNotFound
    )

    implicit val queryStringBindableEnumUserRole = new QueryStringBindable.Parsing[com.trifectalabs.roadquality.v0.models.UserRole](
      UserRole.fromString(_).get, _.toString, enumUserRoleNotFound
    )

  }

}


package com.trifectalabs.roadquality.v0 {

  object Constants {

    val Namespace = "com.trifectalabs.roadquality.v0"
    val UserAgent = "apidoc:0.11.76 http://www.apidoc.me/trifectalabs/roadquality/0.0.3/play_2_5_client"
    val Version = "0.0.3"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[com.trifectalabs.roadquality.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.trifectalabs.roadquality.v0.models.json._

    private[this] val logger = play.api.Logger("com.trifectalabs.roadquality.v0.Client")

    logger.info(s"Initializing com.trifectalabs.roadquality.v0.Client for url $baseUrl")

    def info: Info = Info

    def mapRoutes: MapRoutes = MapRoutes

    def segments: Segments = Segments

    def users: Users = Users

    object Info extends Info {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.VersionInfo] = {
        _executeRequest("GET", s"/info", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.VersionInfo", r, _.validate[com.trifectalabs.roadquality.v0.models.VersionInfo])
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object MapRoutes extends MapRoutes {
      override def get(
        startLat: Double,
        startLng: Double,
        endLat: Double,
        endLng: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.MapRoute] = {
        val queryParameters = Seq(
          Some("startLat" -> startLat.toString),
          Some("startLng" -> startLng.toString),
          Some("endLat" -> endLat.toString),
          Some("endLng" -> endLng.toString)
        ).flatten

        _executeRequest("GET", s"/mapRoutes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.MapRoute", r, _.validate[com.trifectalabs.roadquality.v0.models.MapRoute])
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getSnap(
        lat: Double,
        lng: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Point] = {
        val queryParameters = Seq(
          Some("lat" -> lat.toString),
          Some("lng" -> lng.toString)
        ).flatten

        _executeRequest("GET", s"/mapRoutes/snap", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.Point", r, _.validate[com.trifectalabs.roadquality.v0.models.Point])
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        points: Seq[com.trifectalabs.roadquality.v0.models.Point],
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.MapRoute] = {
        val payload = play.api.libs.json.Json.toJson(points)

        _executeRequest("POST", s"/mapRoutes", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.MapRoute", r, _.validate[com.trifectalabs.roadquality.v0.models.MapRoute])
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Segments extends Segments {
      override def get(
        segmentId: _root_.scala.Option[_root_.java.util.UUID] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.roadquality.v0.models.Segment]] = {
        val queryParameters = Seq(
          segmentId.map("segment_id" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/segments", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("Seq[com.trifectalabs.roadquality.v0.models.Segment]", r, _.validate[Seq[com.trifectalabs.roadquality.v0.models.Segment]])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getBoundingbox(
        xmin: _root_.scala.Option[Double] = None,
        ymin: _root_.scala.Option[Double] = None,
        xmax: _root_.scala.Option[Double] = None,
        ymax: _root_.scala.Option[Double] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.roadquality.v0.models.Segment]] = {
        val queryParameters = Seq(
          xmin.map("xmin" -> _.toString),
          ymin.map("ymin" -> _.toString),
          xmax.map("xmax" -> _.toString),
          ymax.map("ymax" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/segments/boundingbox", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("Seq[com.trifectalabs.roadquality.v0.models.Segment]", r, _.validate[Seq[com.trifectalabs.roadquality.v0.models.Segment]])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        segmentForm: com.trifectalabs.roadquality.v0.models.SegmentForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment] = {
        val payload = play.api.libs.json.Json.toJson(segmentForm)

        _executeRequest("POST", s"/segments", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.Segment", r, _.validate[com.trifectalabs.roadquality.v0.models.Segment])
          case r if r.status == 400 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 400")
        }
      }

      override def patchRatingAndTrafficBySegmentIdAndRating(
        segmentId: _root_.java.util.UUID,
        rating: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment] = {
        _executeRequest("PATCH", s"/segments/${segmentId}/rating/traffic/${rating}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.Segment", r, _.validate[com.trifectalabs.roadquality.v0.models.Segment])
          case r if r.status == 400 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 404")
        }
      }

      override def patchRatingAndSurfaceBySegmentIdAndRating(
        segmentId: _root_.java.util.UUID,
        rating: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment] = {
        _executeRequest("PATCH", s"/segments/${segmentId}/rating/surface/${rating}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.Segment", r, _.validate[com.trifectalabs.roadquality.v0.models.Segment])
          case r if r.status == 400 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 404")
        }
      }
    }

    object Users extends Users {
      override def getByUserId(
        userId: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User] = {
        _executeRequest("GET", s"/users/${userId}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.User", r, _.validate[com.trifectalabs.roadquality.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getEmailByUserEmail(
        userEmail: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User] = {
        _executeRequest("GET", s"/users/email/${play.utils.UriEncoding.encodePathSegment(userEmail, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.User", r, _.validate[com.trifectalabs.roadquality.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def patchSexByUserIdAndSex(
        userId: _root_.java.util.UUID,
        sex: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User] = {
        _executeRequest("PATCH", s"/users/${userId}/sex/${play.utils.UriEncoding.encodePathSegment(sex, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 202 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.User", r, _.validate[com.trifectalabs.roadquality.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 202, 404")
        }
      }

      override def deleteByUserId(
        userId: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User] = {
        _executeRequest("DELETE", s"/users/${userId}", requestHeaders = requestHeaders).map {
          case r if r.status == 202 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.User", r, _.validate[com.trifectalabs.roadquality.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 202, 404")
        }
      }

      override def patchBirthdateByUserIdAndBirthdate(
        userId: _root_.java.util.UUID,
        birthdate: _root_.org.joda.time.DateTime,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User] = {
        _executeRequest("PATCH", s"/users/${userId}/birthdate/${play.utils.UriEncoding.encodePathSegment(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(birthdate), "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 202 => _root_.com.trifectalabs.roadquality.v0.Client.parseJson("com.trifectalabs.roadquality.v0.models.User", r, _.validate[com.trifectalabs.roadquality.v0.models.User])
          case r if r.status == 404 => throw new com.trifectalabs.roadquality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 202, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      
      val holder = ws.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.trifectalabs.roadquality.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def info: com.trifectalabs.roadquality.v0.Info
      def mapRoutes: com.trifectalabs.roadquality.v0.MapRoutes
      def segments: com.trifectalabs.roadquality.v0.Segments
      def users: com.trifectalabs.roadquality.v0.Users
    }

  }

  trait Info {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.VersionInfo]
  }

  trait MapRoutes {
    def get(
      startLat: Double,
      startLng: Double,
      endLat: Double,
      endLng: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.MapRoute]

    def getSnap(
      lat: Double,
      lng: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Point]

    def post(
      points: Seq[com.trifectalabs.roadquality.v0.models.Point],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.MapRoute]
  }

  trait Segments {
    /**
     * Search all segments
     */
    def get(
      segmentId: _root_.scala.Option[_root_.java.util.UUID] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.roadquality.v0.models.Segment]]

    /**
     * Search all segments within a bounding box
     */
    def getBoundingbox(
      xmin: _root_.scala.Option[Double] = None,
      ymin: _root_.scala.Option[Double] = None,
      xmax: _root_.scala.Option[Double] = None,
      ymax: _root_.scala.Option[Double] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.roadquality.v0.models.Segment]]

    def post(
      segmentForm: com.trifectalabs.roadquality.v0.models.SegmentForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment]

    def patchRatingAndTrafficBySegmentIdAndRating(
      segmentId: _root_.java.util.UUID,
      rating: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment]

    def patchRatingAndSurfaceBySegmentIdAndRating(
      segmentId: _root_.java.util.UUID,
      rating: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.Segment]
  }

  trait Users {
    def getByUserId(
      userId: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User]

    def getEmailByUserEmail(
      userEmail: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User]

    def patchSexByUserIdAndSex(
      userId: _root_.java.util.UUID,
      sex: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User]

    def deleteByUserId(
      userId: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User]

    def patchBirthdateByUserIdAndBirthdate(
      userId: _root_.java.util.UUID,
      birthdate: _root_.org.joda.time.DateTime,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.roadquality.v0.models.User]
  }

  package errors {

    import com.trifectalabs.roadquality.v0.models.json._

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.trifectalabs.roadquality.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}