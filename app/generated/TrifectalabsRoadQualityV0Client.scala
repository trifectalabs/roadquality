/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.6
 * apidoc:0.11.74 http://www.apidoc.me/trifectalabs/road_quality/0.0.6/play_2_5_client
 */
package com.trifectalabs.road.quality.v0.models {

  /**
   * A longitudinal or latitudinal coordatine
   */
  case class Point(
    lat: Double,
    lng: Double
  )

  /**
   * A routable path on a map - not necessarily a segment
   */
  case class Route(
    polyline: String,
    distance: Double
  )

  /**
   * A segment of road which will be rated and tagged
   */
  case class Segment(
    id: _root_.java.util.UUID,
    name: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    start: com.trifectalabs.road.quality.v0.models.Point,
    end: com.trifectalabs.road.quality.v0.models.Point,
    polyline: String,
    rating: Double
  )

  /**
   * Form the client uses to create a segment
   */
  case class SegmentForm(
    name: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    points: Seq[com.trifectalabs.road.quality.v0.models.Point],
    rating: Double
  )

  case class VersionInfo(
    name: String,
    version: String,
    scalaVersion: String,
    sbtVersion: String
  )

}

package com.trifectalabs.road.quality.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.trifectalabs.road.quality.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsRoadQualityPoint: play.api.libs.json.Reads[Point] = {
      (
        (__ \ "lat").read[Double] and
        (__ \ "lng").read[Double]
      )(Point.apply _)
    }

    def jsObjectPoint(obj: com.trifectalabs.road.quality.v0.models.Point) = {
      play.api.libs.json.Json.obj(
        "lat" -> play.api.libs.json.JsNumber(obj.lat),
        "lng" -> play.api.libs.json.JsNumber(obj.lng)
      )
    }

    implicit def jsonWritesRoadQualityPoint: play.api.libs.json.Writes[Point] = {
      new play.api.libs.json.Writes[com.trifectalabs.road.quality.v0.models.Point] {
        def writes(obj: com.trifectalabs.road.quality.v0.models.Point) = {
          jsObjectPoint(obj)
        }
      }
    }

    implicit def jsonReadsRoadQualityRoute: play.api.libs.json.Reads[Route] = {
      (
        (__ \ "polyline").read[String] and
        (__ \ "distance").read[Double]
      )(Route.apply _)
    }

    def jsObjectRoute(obj: com.trifectalabs.road.quality.v0.models.Route) = {
      play.api.libs.json.Json.obj(
        "polyline" -> play.api.libs.json.JsString(obj.polyline),
        "distance" -> play.api.libs.json.JsNumber(obj.distance)
      )
    }

    implicit def jsonWritesRoadQualityRoute: play.api.libs.json.Writes[Route] = {
      new play.api.libs.json.Writes[com.trifectalabs.road.quality.v0.models.Route] {
        def writes(obj: com.trifectalabs.road.quality.v0.models.Route) = {
          jsObjectRoute(obj)
        }
      }
    }

    implicit def jsonReadsRoadQualitySegment: play.api.libs.json.Reads[Segment] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "name").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "start").read[com.trifectalabs.road.quality.v0.models.Point] and
        (__ \ "end").read[com.trifectalabs.road.quality.v0.models.Point] and
        (__ \ "polyline").read[String] and
        (__ \ "rating").read[Double]
      )(Segment.apply _)
    }

    def jsObjectSegment(obj: com.trifectalabs.road.quality.v0.models.Segment) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "start" -> jsObjectPoint(obj.start),
        "end" -> jsObjectPoint(obj.end),
        "polyline" -> play.api.libs.json.JsString(obj.polyline),
        "rating" -> play.api.libs.json.JsNumber(obj.rating)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesRoadQualitySegment: play.api.libs.json.Writes[Segment] = {
      new play.api.libs.json.Writes[com.trifectalabs.road.quality.v0.models.Segment] {
        def writes(obj: com.trifectalabs.road.quality.v0.models.Segment) = {
          jsObjectSegment(obj)
        }
      }
    }

    implicit def jsonReadsRoadQualitySegmentForm: play.api.libs.json.Reads[SegmentForm] = {
      (
        (__ \ "name").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "points").read[Seq[com.trifectalabs.road.quality.v0.models.Point]] and
        (__ \ "rating").read[Double]
      )(SegmentForm.apply _)
    }

    def jsObjectSegmentForm(obj: com.trifectalabs.road.quality.v0.models.SegmentForm) = {
      play.api.libs.json.Json.obj(
        "points" -> play.api.libs.json.Json.toJson(obj.points),
        "rating" -> play.api.libs.json.JsNumber(obj.rating)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesRoadQualitySegmentForm: play.api.libs.json.Writes[SegmentForm] = {
      new play.api.libs.json.Writes[com.trifectalabs.road.quality.v0.models.SegmentForm] {
        def writes(obj: com.trifectalabs.road.quality.v0.models.SegmentForm) = {
          jsObjectSegmentForm(obj)
        }
      }
    }

    implicit def jsonReadsRoadQualityVersionInfo: play.api.libs.json.Reads[VersionInfo] = {
      (
        (__ \ "name").read[String] and
        (__ \ "version").read[String] and
        (__ \ "scalaVersion").read[String] and
        (__ \ "sbtVersion").read[String]
      )(VersionInfo.apply _)
    }

    def jsObjectVersionInfo(obj: com.trifectalabs.road.quality.v0.models.VersionInfo) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version),
        "scalaVersion" -> play.api.libs.json.JsString(obj.scalaVersion),
        "sbtVersion" -> play.api.libs.json.JsString(obj.sbtVersion)
      )
    }

    implicit def jsonWritesRoadQualityVersionInfo: play.api.libs.json.Writes[VersionInfo] = {
      new play.api.libs.json.Writes[com.trifectalabs.road.quality.v0.models.VersionInfo] {
        def writes(obj: com.trifectalabs.road.quality.v0.models.VersionInfo) = {
          jsObjectVersionInfo(obj)
        }
      }
    }
  }
}

package com.trifectalabs.road.quality.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.trifectalabs.road.quality.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package com.trifectalabs.road.quality.v0 {

  object Constants {

    val Namespace = "com.trifectalabs.road.quality.v0"
    val UserAgent = "apidoc:0.11.74 http://www.apidoc.me/trifectalabs/road_quality/0.0.6/play_2_5_client"
    val Version = "0.0.6"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[com.trifectalabs.road.quality.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.trifectalabs.road.quality.v0.models.json._

    private[this] val logger = play.api.Logger("com.trifectalabs.road.quality.v0.Client")

    logger.info(s"Initializing com.trifectalabs.road.quality.v0.Client for url $baseUrl")

    def info: Info = Info

    def routes: Routes = Routes

    def segments: Segments = Segments

    object Info extends Info {
      override def get(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.VersionInfo] = {
        _executeRequest("GET", s"/info", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.VersionInfo", r, _.validate[com.trifectalabs.road.quality.v0.models.VersionInfo])
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Routes extends Routes {
      override def get(
        startLat: Double,
        startLng: Double,
        endLat: Double,
        endLng: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Route] = {
        val queryParameters = Seq(
          Some("start_lat" -> startLat.toString),
          Some("start_lng" -> startLng.toString),
          Some("end_lat" -> endLat.toString),
          Some("end_lng" -> endLng.toString)
        ).flatten

        _executeRequest("GET", s"/routes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.Route", r, _.validate[com.trifectalabs.road.quality.v0.models.Route])
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        points: Seq[com.trifectalabs.road.quality.v0.models.Point],
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Route] = {
        val payload = play.api.libs.json.Json.toJson(points)

        _executeRequest("POST", s"/routes", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.Route", r, _.validate[com.trifectalabs.road.quality.v0.models.Route])
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Segments extends Segments {
      override def getAll(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.road.quality.v0.models.Segment]] = {
        _executeRequest("GET", s"/segments/all", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("Seq[com.trifectalabs.road.quality.v0.models.Segment]", r, _.validate[Seq[com.trifectalabs.road.quality.v0.models.Segment]])
          case r if r.status == 404 => throw new com.trifectalabs.road.quality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getBySegmentId(
        segmentId: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment] = {
        _executeRequest("GET", s"/segments/${segmentId}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.Segment", r, _.validate[com.trifectalabs.road.quality.v0.models.Segment])
          case r if r.status == 404 => throw new com.trifectalabs.road.quality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        segmentForm: com.trifectalabs.road.quality.v0.models.SegmentForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment] = {
        val payload = play.api.libs.json.Json.toJson(segmentForm)

        _executeRequest("POST", s"/segments", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.Segment", r, _.validate[com.trifectalabs.road.quality.v0.models.Segment])
          case r if r.status == 400 => throw new com.trifectalabs.road.quality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 400")
        }
      }

      override def patchRatingBySegmentIdAndRating(
        segmentId: _root_.java.util.UUID,
        rating: Double,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment] = {
        _executeRequest("PATCH", s"/segments/${segmentId}/rating/${rating}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.trifectalabs.road.quality.v0.Client.parseJson("com.trifectalabs.road.quality.v0.models.Segment", r, _.validate[com.trifectalabs.road.quality.v0.models.Segment])
          case r if r.status == 400 => throw new com.trifectalabs.road.quality.v0.errors.ValueResponse(r)
          case r if r.status == 404 => throw new com.trifectalabs.road.quality.v0.errors.ValueResponse(r)
          case r => throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      
      val holder = ws.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.trifectalabs.road.quality.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def info: com.trifectalabs.road.quality.v0.Info
      def routes: com.trifectalabs.road.quality.v0.Routes
      def segments: com.trifectalabs.road.quality.v0.Segments
    }

  }

  trait Info {
    def get(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.VersionInfo]
  }

  trait Routes {
    def get(
      startLat: Double,
      startLng: Double,
      endLat: Double,
      endLng: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Route]

    def post(
      points: Seq[com.trifectalabs.road.quality.v0.models.Point],
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Route]
  }

  trait Segments {
    def getAll(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.trifectalabs.road.quality.v0.models.Segment]]

    def getBySegmentId(
      segmentId: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment]

    def post(
      segmentForm: com.trifectalabs.road.quality.v0.models.SegmentForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment]

    def patchRatingBySegmentIdAndRating(
      segmentId: _root_.java.util.UUID,
      rating: Double,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.trifectalabs.road.quality.v0.models.Segment]
  }

  package errors {

    import com.trifectalabs.road.quality.v0.models.json._

    case class ValueResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val value = _root_.com.trifectalabs.road.quality.v0.Client.parseJson("String", response, _.validate[String])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}